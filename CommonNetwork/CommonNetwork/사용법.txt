★★★★모든 패킷은 다 동적할당 되어있으므로 패킷을 꺼내와서 처리 한 뒤 반드시 동적할당 해제 필요★★★★
★★★★네트워크 처리쪽은 별도의 스레드로 관리할것★★★★


===========================================================================================


※※※※UDP는 socket으로 관리되는게 아니기때문에 필요에 따라 대상의 sockaddr_in을 따로 저장해둬야 한다.※※※※
※※※※그러니 UDP단독으로 서버용으로 사용은 무리고 TCP랑 같이 사용해서 addr을 저장해둔다음 TCP연결이 되있지 않다면 같이 지우는식으로 사용하는게 필요※※※※
UDP 통신 - 클라이언트, 서버

cUDPSocket 사용

1 - 1. bool beginServer(const char* _csPort, int _iMode, int _iTimeOut);
사용하여 서버 스레드 시작
- _bIsServer: true를 입력하게 되면 서버 false를 입력하게 되면 클라이언트
- _csPort	: 통신에 사용할 포트, 기본 58326
_ _iMode	: IPv4전용, IPv6전용, 둘 다 사용, 기본 eWINSOCK_USE_BOTH
- _iTimeOut : 타임아웃, 기본 5000ms

1 - 2. bool beginClient(const char* _csIP, const char* _csPort, int _iTimeOut);
사용하여 서버 스레드 시작
- _csIP		: 서버 주소(IPv4, IPv6 둘 다 사용가능)
- _csPort	: 통신에 사용할 포트, 기본 58326
- _iTimeOut : 타임아웃, 기본 5000ms

2. 멈추고 싶을 땐 void stop() 호출

3. 패킷 추가는 void pushSend(int _iSize, char* _lpData, unSOCKADDR_IN* _lpAddrInfo = nullptr)
- _iSize	: 패킷 크기
- _lpData	: 데이터
- _lpAddrInfo: 수신받을 대상의 unSOCKADDR_IN

4. 패킷 받아오는거는두가지 방법 존재
4-1. 내용물 복제하는거, bool getRecvQueue(std::deque<cPacketUDP*>* _lpQueue, bool _bFlush = true)
- _lpQueue	: 패킷 받아올 큐
- _bFlush	: 초기화 여부


4-2. 갖고있는 패킷 큐를 swap, bool swapRecvQueue(std::deque<cPacketUDP*>* _lpQueue)
- _lpQueue	: 패킷 받아올 큐


===========================================================================================


TCP 통신 - 클라이언트

cTCPClient 사용
1. bool tryConnectServer(const char* _csIP, const char* _csPort, int _iTimeOut, bool _bUseNoDelay);
사용하여 스레드 시작
- _csIP		: 서버 IP
- _iPort	: 통신에 사용할 포트, 기본 58326
- _iTimeOut : 타임아웃, 기본 5000ms
- _bUseNoDelay: Nagle 알고리즘 사용여부, 기본 false

2. 멈추고 싶을 땐 void stop() 호출

3. 패킷 추가는 void pushSend(int _iSize, char* _lpData)
- _iSize	: 패킷 크기
- _lpData	: 데이터

4. 패킷 받아오는거는두가지 방법 존재
4-1. 내용물 복제하는거, bool getRecvQueue(std::deque<cPacketTCP*>* _lpQueue, bool _bFlush = true)
- _lpQueue	: 패킷 받아올 큐
- _bFlush	: 초기화 여부

4-2. 갖고있는 패킷 큐를 swap, bool swapRecvQueue(std::deque<cPacketTCP*>* _lpQueue)
- _lpQueue	: 패킷 받아올 큐



===========================================================================================


TCP 통신 - 서버

cTCPServer 사용

1. bool begin(const char* _csPort, int _iMode, int _iTick, int _iTimeOut, bool _bUseNoDelay);
사용하여 스레드 시작
- _csPort	: 통신에 사용할 포트, 기본 58326
- _iMode	: IPv4, IPv6, 또는 둘 다, 기본 eWINSOCK_USE_BOTH
- _iTick	: 처리 스레드 처리 간격
- _iTimeOut : 타임아웃, 기본 5000ms
- _bUseNoDelay: Nagle 알고리즘 사용여부, 기본 false

2. 멈추고 싶을 땐 void stop() 호출

3. 모두에게 송신하는 패킷 추가는 void sendAll(int _iSize, char* _lpData)
- _iSize	: 패킷 크기
- _lpData	: 데이터

4. 특정 대상에게 송신하는 패킷 추가는 void sendTarget(SOCKET _Socket, int _iSize, char* _lpData)
- _Socket	: 수신 대상
- _iSize	: 패킷 크기
- _lpData	: 데이터

5. 패킷 받아오는거는두가지 방법 존재
5-1. 내용물 복제하는거, bool getRecvQueue(std::deque<cPacketTCP*>* _lpQueue, bool _bFlush = true)
- _lpQueue	: 패킷 받아올 큐
- _bFlush	: 초기화 여부

5-2. 갖고있는 패킷 큐를 swap, bool swapRecvQueue(std::deque<cPacketTCP*>* _lpQueue)
- _lpQueue	: 패킷 받아올 큐